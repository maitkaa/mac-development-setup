---
- name: Set up MacBook for development
  hosts: localhost
  connection: local
  become: false
  vars_files:
    - config.yml

  tasks:
    - name: Ensure Homebrew is installed
      stat: path=/opt/homebrew/bin/brew
      register: homebrew_check

    - name: Install Homebrew if not present
      shell: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      when: not homebrew_check.stat.exists

    - name: Update Homebrew and upgrade all packages
      community.general.homebrew:
        update_homebrew: yes
        upgrade_all: yes

    - name: Install Homebrew packages
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      loop:
        - git
        - wget
        - curl
        - php
        - composer
        - nvm
        - node
        - typescript
        - yarn

    - name: Install Cask applications
      community.general.homebrew_cask:
        name: "{{ item }}"
        state: present
        greedy: yes
      loop:
        - visual-studio-code
        - docker
        - phpstorm
        - iterm2
        - brave-browser
        - firefox-developer-edition
        - figma
        - obs
        - insomnia
        - lens
        - spotify
        - warp

    - name: Install Laravel Herd
      block:
        - name: Download Laravel Herd
          get_url:
            url: "https://herd.laravel.com/download"
            dest: /tmp/herd.dmg
        - name: Mount Laravel Herd DMG
          command: hdiutil attach /tmp/herd.dmg
        - name: Install Laravel Herd
          command: cp -R "/Volumes/Laravel Herd/Laravel Herd.app" /Applications/
        - name: Unmount Laravel Herd DMG
          command: hdiutil detach "/Volumes/Laravel Herd"
      when: "'Laravel Herd.app' not in lookup('pipe', 'ls /Applications')"

    - name: Install DevToys
      block:
        - name: Download DevToys
          get_url:
            url: "https://github.com/DevToys-app/DevToysMac/releases/latest/download/DevToys.app.zip"
            dest: /tmp/DevToys.zip
        - name: Unzip DevToys
          unarchive:
            src: /tmp/DevToys.zip
            dest: /Applications/
      when: "'DevToys.app' not in lookup('pipe', 'ls /Applications')"

    - name: Install Notion
      block:
        - name: Download Notion
          get_url:
            url: "https://www.notion.so/desktop/mac/download"
            dest: /tmp/Notion.dmg
        - name: Mount Notion DMG
          command: hdiutil attach /tmp/Notion.dmg
        - name: Install Notion
          command: cp -R "/Volumes/Notion/Notion.app" /Applications/
        - name: Unmount Notion DMG
          command: hdiutil detach "/Volumes/Notion"
      when: "'Notion.app' not in lookup('pipe', 'ls /Applications')"

    - name: Install Arc browser
      block:
        - name: Download Arc
          get_url:
            url: "https://releases.arc.net/release/Arc-latest.dmg"
            dest: /tmp/Arc.dmg
        - name: Mount ARC DMG
          command: hdiutil attach /tmp/Arc.dmg
        - name: Install Arc
          command: cp -R "/Volumes/Arc/Arc.app" /Applications/
        - name: Unmount Arc DMG
          command: hdiutil detach "/Volumes/Arc"
      when: "'Arc.app' not in lookup('pipe', 'ls /Applications')"

    - name: Install JetBrains Toolbox
      block:
        - name: Download JetBrains Toolbox
          get_url:
            url: "https://www.jetbrains.com/toolbox-app/download/download-thanks.html?platform=macM1"
            dest: /tmp/jetbrains-toolbox.dmg
        - name: Mount JetBrains Toolbox DMG
          command: hdiutil attach /tmp/jetbrains-toolbox.dmg
        - name: Install JetBrains Toolbox
          command: cp -R "/Volumes/JetBrains Toolbox/JetBrains Toolbox.app" /Applications/
        - name: Unmount JetBrains Toolbox DMG
          command: hdiutil detach "/Volumes/JetBrains Toolbox"
      when: "'JetBrains Toolbox.app' not in lookup('pipe', 'ls /Applications')"

    - name: Check if Oh My Zsh is installed
      stat: path=~/.oh-my-zsh
      register: oh_my_zsh

    - name: Install Oh My Zsh if not present
      shell: |
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      when: not oh_my_zsh.stat.exists

    - name: Check if Powerlevel10k is installed
      stat: path=~/powerlevel10k
      register: powerlevel10k

    - name: Install Powerlevel10k if not present
      git:
        repo: 'https://github.com/romkatv/powerlevel10k.git'
        dest: '~/powerlevel10k'
        depth: 1
      when: not powerlevel10k.stat.exists

    - name: Configure Powerlevel10k in .zshrc
      lineinfile:
        path: ~/.zshrc
        line: 'source ~/powerlevel10k/powerlevel10k.zsh-theme'
        create: yes

    - name: Copy aliases file
      copy:
        src: zsh_aliases
        dest: ~/.zsh_aliases

    - name: Source aliases in .zshrc
      lineinfile:
        path: ~/.zshrc
        line: 'source ~/.zsh_aliases'
        create: yes

    - name: Configure Git
      git_config:
        name: "{{ item.name }}"
        scope: global
        value: "{{ item.value }}"
      loop:
        - { name: 'user.name', value: '{{ git_user_name }}' }
        - { name: 'user.email', value: '{{ git_user_email }}' }

    - name: Check if GitHub SSH key exists
      stat: path=~/.ssh/github_id_rsa
      register: github_ssh_key

    - name: Generate SSH key for GitHub
      openssh_keypair:
        path: ~/.ssh/github_id_rsa
        type: rsa
        size: 4096
        comment: "{{ git_user_email }}"
      when: not github_ssh_key.stat.exists

    - name: Display GitHub SSH public key
      command: cat ~/.ssh/github_id_rsa.pub
      register: github_ssh_key_content
      when: not github_ssh_key.stat.exists

    - name: Install global npm packages
      npm:
        name: "{{ item }}"
        global: yes
        state: latest
      loop:
        - typescript
        - react
        - create-react-app
        - "@remix-run/dev"

    - name: Remind about manual installations
      debug:
        msg: "Please manually install the following applications: {{ manual_applications | map(attribute='name') | join(', ') }}"

    - name: Display GitHub SSH key
      debug:
        msg: 
          - "Your GitHub SSH public key is:"
          - "{{ github_ssh_key_content.stdout }}"
          - "Please add this key to your GitHub account settings if you haven't already."
      when: not github_ssh_key.stat.exists

    - name: Clean up
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/herd.dmg
        - /tmp/DevToys.zip
        - /tmp/Notion.dmg
        - /tmp/Arc.dmg
        - /tmp/jetbrains-toolbox.dmg